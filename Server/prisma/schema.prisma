generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  uid               String?          @unique
  firstname         String?
  lastname          String?
  email             String           @unique
  password          String
  role              UserRole         @default(USER)
  profileInfo       String?
  disabilities      DisabilityType[] @default([])
  notificationToken String?
  createdAt         DateTime         @default(now())
  notifications     Notification[]
  reviews           Review[]
  venues            Event[]
}

model Venue {
  id                    String                 @id @default(cuid())
  name                  String
  address               String?
  contactInformation    String?
  venueCapacity         Int?
  events                Event[]
  description           String?
  photos                String[]              @default([])
  routeDirection        String?
  createdAt             DateTime              @default(now())
  accessibilityFeatures AccessibilityFeature[] @relation("VenueFeatures")
  reviews               Review[]
}


model Event {
  id                    String                 @id @default(cuid())
  title                 String
  description           String?
  startDate             DateTime?
  endDate               DateTime?
  photos                String[]        @default([])
  createdAt             DateTime               @default(now())
  venueId               String
  venue                 Venue    @relation(fields: [venueId], references: [id])
  createdBy             String
  user                  User    @relation(fields: [createdBy], references: [id])
}

model AccessibilityFeature {
  id                 String  @id @default(cuid())
  category           String @unique
  description        String?
  availabilityStatus Boolean @default(true)
  venue              Venue[]  @relation("VenueFeatures")
}

model Review {
  id                   String   @id @default(cuid())
  venueId              String
  userId               String
  rating               Int
  comments             String?
  accessibilityRatings Json
  dateCreated          DateTime @default(now())
  dateUpdated          DateTime @updatedAt
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  venue                Venue  @relation(fields: [venueId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

enum DisabilityType {
  MOBILITY
  VISUAL
  HEARING
  OTHER
}
